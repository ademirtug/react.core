variables:
  CONTAINER_NAME: react.core
  HTTP_PORT: 9000
  HTTPS_PORT: 9001
  
stages:
  - build
  - deploy
  - health-check
  - cleanup

build_container:
  stage: build
  script:
    - unset DOCKER_HOST
    - docker build --no-cache -t $CONTAINER_NAME:latest .

deploy_image:
  stage: deploy
  script: 
    - if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME; fi
    - docker run --name $CONTAINER_NAME  --add-host host.docker.internal:host-gateway -d -p $HTTP_PORT:8080 -p $HTTPS_PORT:8081 --restart unless-stopped $CONTAINER_NAME:latest

check_container_health:
  stage: health-check
  script:
    - sleep 10  # Allow some time for the application to start
    - |
      if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
        echo "Container is running. Checking logs for errors..."
        LOGS=$(docker logs $CONTAINER_NAME 2>&1)
        if echo "$LOGS" | grep -q "Unhandled exception\|Error\|Critical"; then
          echo "Application encountered an error. Logs:"
          echo "$LOGS"
          exit 1
        else
          echo "Application is running without critical errors."
        fi
      else
        echo "Container is not running! Fetching details..."
        docker inspect $CONTAINER_NAME || echo "Inspect failed"
        docker logs $CONTAINER_NAME || echo "Logs unavailable"
        EXIT_CODE=$(docker inspect --format='{{.State.ExitCode}}' $CONTAINER_NAME || echo "Unknown")
        echo "Container crashed with exit code: $EXIT_CODE"
        exit 1
      fi

cleanup:
  stage: cleanup
  script:
    - rm -rf ./*
    - docker system prune -f